class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        int m = nums.size(), n = nums[0].size(), o = m * n;
        if (r * c != o) return nums;
        vector<vector<int>> res(r, vector<int>(c, 0));
        for (int i = 0; i < o; i++) res[i / c][i % c] = nums[i / n][i % n];
        return res;
    }
};
//这里用到了vector<vector<int >>的构造方法 vector<vector<int>> res(r, vector<int>(c, 0));
/*
 // 0. Create an empty vector v0  
    std::vector<int> v0;  
    assert(v0.empty());  
  
    // 1. Create a vector v1 with 3 elements of default value 0  
    std::vector<int> v1(3);  
  
    // 2. Create a vector v2 with 5 elements of value 2  
    std::vector<int> v2(5, 2);  
  
    // 3. Create a vector v3 with 3 elements of value 1 and with the allocator of vector v2  
    std::vector<int> v3(3, 1, v2.get_allocator());  
  
    // 4. Create a copy, vector v4, of vector v2  
    std::vector<int> v4(v2);  
  
    // 5. Create a vector v5 by copying the range v4[_First, _Last)  
    std::vector<int> v5(v4.begin() + 1, v4.begin() + 3);  
    */
